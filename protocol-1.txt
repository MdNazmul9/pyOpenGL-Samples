Unrestricted Simplex Protocol- Protocol 1

[ HEADER.H ]

#include<stdio.h>
#include<fcntl.h>
#include<string.h>
typedef struct 
{
 int seqno;
 int ackno;
 char data[50];
}frame;
void from_network_layer(char buffer[])
{
 printf("Enter Data : ");
 scanf("%s",buffer);
}
void to_physical_layer(int pid1,frame *f)
{
 write(pid1,f,sizeof(frame));
}
void from_physical_layer(int pid1,frame *f)
{
 read(pid1,f,sizeof(frame));
}
void to_network_layer(char buffer[])
{ 
 printf("\n%s",buffer);
}



[ SENDER SIDE ]

#include<stdio.h>
#include<fcntl.h>
#include<string.h>
#include "header.h"
void main()
{
 int pid1,i,no;
 char buffer[50];
 frame f;
 system(">pipe1");
 pid1=open("pipe1",O_WRONLY);
 printf("Enter NUMBER OF DATA : ");
 scanf("%d",&no);
 write(pid1,&no,sizeof(no));
 for(i=0;i<no;i++)
 {
  from_network_layer(buffer);
  strcpy(f.data,buffer);
  to_physical_layer(pid1,&f);
 }
 close(pid1);
}

[ RECEIVER SIDE ]


#include<stdio.h>
#include<fcntl.h>
#include<string.h>
#include "header.h"
void main()
{
 int pid1,no,i;
 char buffer[50]; 
 frame f;
 pid1=open("pipe1",O_RDONLY); 
 read(pid1,&no,sizeof(no));
 printf("DATA RECEIVED : %d",no);
 printf("\nDATA");
 for(i=0;i<no;i++)
 {
  from_physical_layer(pid1,&f);
  strcpy(buffer,f.data);
  to_network_layer(buffer);
 }
 close(pid1);
 unlink("pipe1");
}